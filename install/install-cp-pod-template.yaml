apiVersion: v1
kind: ServiceAccount
metadata:
  name: paladin-installer
  namespace: akash-services
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: paladin-installer-binding
subjects:
  - kind: ServiceAccount
    name: paladin-installer
    namespace: akash-services
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: install-secondary-cp-<NODE_NAME>
  namespace: akash-services
  labels:
    app: paladin-installer
spec:
  serviceAccountName: paladin-installer
  nodeSelector:
    kubernetes.io/hostname: <NODE_NAME>
  tolerations:
    - operator: Exists
  restartPolicy: Never

  containers:
    - name: paladin-installer
      image: bitnami/kubectl:latest
      imagePullPolicy: IfNotPresent
      securityContext:
        runAsUser: 0
      env:
        - name: TARGET_NODE
          value: "<NODE_NAME>"
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -euo pipefail

          echo "[*] Installing prerequisites via apt…"
          apt-get update -qq
          apt-get install -y --no-install-recommends \
            git bash curl tar etcd-client \
          && rm -rf /var/lib/apt/lists/*

          echo "[*] Cloning paladin repo onto host…"
          [[ -d /root/akash-provider-paladin ]] && rm -rf /root/akash-provider-paladin
          git clone -b dev https://github.com/SGC41/akash-provider-paladin.git \
            /root/akash-provider-paladin

          mkdir -p /root/provider

          ETCD_CACERT=/etc/ssl/etcd/ssl/ca.pem
          ETCD_CERT=/etc/ssl/etcd/ssl/node-${TARGET_NODE}.pem
          ETCD_KEY=/etc/ssl/etcd/ssl/node-${TARGET_NODE}-key.pem
          ETCD_HOST=${TARGET_NODE}
          ETCD_ENDPOINTS=https://${ETCD_HOST}:2379

          echo "[*] Fetching provider.yaml from etcd…"
          etcdctl get /akash-provider-paladin/provider.yaml \
            --endpoints="${ETCD_ENDPOINTS}" \
            --cacert="$ETCD_CACERT" \
            --cert="$ETCD_CERT" \
            --key="$ETCD_KEY" \
            --print-value-only > /root/provider/provider.yaml

          echo "[*] Fetching price_script_generic.sh from etcd…"
          etcdctl get /akash-provider-paladin/price_script_generic.sh \
            --endpoints="${ETCD_ENDPOINTS}" \
            --cacert="$ETCD_CACERT" \
            --cert="$ETCD_CERT" \
            --key="$ETCD_KEY" \
            --print-value-only > /root/provider/price_script_generic.sh

          chmod +x /root/provider/price_script_generic.sh

          echo "[*] Ensuring RPC rotation cronjob…"
          CRONLINE="*/10 * * * * [ -f /tmp/rpc-rotate.do ] && /bin/sh /root/akash-provider-paladin/scripts/rpc-rotate.sh >> /var/log/rpc-rotate.log 2>&1 && rm -f /tmp/rpc-rotate.do"
          crontab -l 2>/dev/null | grep -F -q "$CRONLINE" || \
            (crontab -l 2>/dev/null; echo "$CRONLINE") | crontab -

          echo "[✓] Install complete for $TARGET_NODE"

      volumeMounts:
        - name: root-home
          mountPath: /root
        - name: etcd-certs
          mountPath: /etc/ssl/etcd/ssl
          readOnly: true

  volumes:
    - name: root-home
      hostPath:
        path: /root
        type: Directory
    - name: etcd-certs
      hostPath:
        path: /etc/ssl/etcd/ssl
        type: Directory

