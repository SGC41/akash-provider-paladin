apiVersion: v1
kind: ServiceAccount
metadata:
  name: paladin-installer
  namespace: akash-services
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: paladin-installer-binding
subjects:
  - kind: ServiceAccount
    name: paladin-installer
    namespace: akash-services
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: install-secondary-cp-<NODE_NAME>
  namespace: akash-services
  labels:
    app: paladin-installer
spec:
  serviceAccountName: paladin-installer
  nodeSelector:
    kubernetes.io/hostname: <NODE_NAME>
  restartPolicy: Never

  containers:
    - name: paladin-installer
      image: alpine:3.19
      command: ["/bin/sh","-c"]
      args:
        - |
          set -euo pipefail
          apk add --no-cache git bash etcd-tools curl tar

          echo "[*] Ensuring Helm v3.11.0 is installed…"
          if ! command -v helm >/dev/null 2>&1; then
            wget -q https://get.helm.sh/helm-v3.11.0-linux-amd64.tar.gz
            tar -zxvf helm-v3.11.0-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
          fi

          echo "[*] Cloning paladin repo (branch: dev)…"
          git clone -b dev https://github.com/SGC41/akash-provider-paladin.git "$HOME/akash-provider-paladin"

          mkdir -p "$HOME/provider"
          HOST=$(hostname -s)
          ETCD_CACERT=/etc/ssl/etcd/ssl/ca.pem
          ETCD_CERT=/etc/ssl/etcd/ssl/node-$HOST.pem
          ETCD_KEY=/etc/ssl/etcd/ssl/node-$HOST-key.pem

          echo "[*] Fetching provider.yaml from etcd…"
          etcdctl get /akash-provider-paladin/provider.yaml \
            --cacert="$ETCD_CACERT" \
            --cert="$ETCD_CERT" \
            --key="$ETCD_KEY" \
            --print-value-only > "$HOME/provider/provider.yaml"

          echo "[*] Fetching price_script_generic.sh from etcd…"
          etcdctl get /akash-provider-paladin/price_script_generic.sh \
            --cacert="$ETCD_CACERT" \
            --cert="$ETCD_CERT" \
            --key="$ETCD_KEY" \
            --print-value-only > "$HOME/provider/price_script_generic.sh"

          chmod +x "$HOME/provider/price_script_generic.sh"

          echo "[*] Ensuring RPC rotation cronjob…"
          CRONLINE="*/10 * * * * [ -f /tmp/rpc-rotate.do ] && /bin/sh /root/akash-provider-paladin/scripts/rpc-rotate.sh >> /var/log/rpc-rotate.log 2>&1 && rm -f /tmp/rpc-rotate.do"
          crontab -l 2>/dev/null | grep -F -q "$CRONLINE" || \
            (crontab -l 2>/dev/null; echo "$CRONLINE") | crontab -

          echo "[✓] Install complete on $(hostname)"

      volumeMounts:
        - name: root-home
          mountPath: /root
        - name: etcd-certs
          mountPath: /etc/ssl/etcd/ssl
          readOnly: true

  volumes:
    - name: root-home
      emptyDir: {}
    - name: etcd-certs
      hostPath:
        path: /etc/ssl/etcd/ssl
        type: Directory
